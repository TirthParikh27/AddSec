
name: Deploy to Amazon ECS
jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

#       - name: CodeGuru Reviewer
#         uses: aws-actions/codeguru-reviewer@v1.1
#         with:
#           build_path: ./
#           s3_bucket: codeguru-reviewer-addsec

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

#       - name: ZAP DAST Scan
#         uses: zaproxy/action-full-scan@v0.2.0
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           target: http://flask-app-319191450.us-east-2.elb.amazonaws.com/
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-ecr-repo
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.build-image.outputs.image }}
          args: --file=Dockerfile
      - name: Upload review result
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: snyk.sarif
#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-def.json
#           container-name: flask-app
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: flask-app
#           cluster: flask-app
#           wait-for-service-stability: false
#   CodeduruJob:
#     name: CodeduruJob
#     needs: deploy
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Upload review result
#         uses: github/codeql-action/upload-sarif@v1
#         with:
#           sarif_file: codeguru-results.sarif.json
#   SnykJob:
#     name: SnykJob
#     needs: deploy
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Upload review result
#         uses: github/codeql-action/upload-sarif@v1
#         with:
#           sarif_file: snyk.sarif
